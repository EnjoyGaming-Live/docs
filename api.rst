.. _seamless-label:

Wallet Seamless API
************************

API Methods
############

Brief methods description
===========================

1. **login** method is sent every time a player enters game's page. A server passes a secret token that was used to start the game. If an Operator accepts it, the game is displayed for the player. Otherwise, the player sees an error message (read below about possible error messages).
2. **transaction** method is sent every time a player performs a gaming action. A server passes a bet, that was made by player and his win. If an Operator confirms the transaction, the player sees a result (balance change). Otherwise, the player sees an error message (read below about possible error messages).
3. **getbalance** method is sent periodically, when a player has a game opened and doesn't perform any gaming actions. Its main goal is to get player's actual balance. This method is sent with frequency set by ``{BALANCE_EXPIRE}`` which is configured by an integration manager.
4. **rollback** method is sent in case **transaction** request returned no response. Its main goal is to synchronize game server with an Operator after connection dropouts.
5. **logout**  method is sent once a player exited a game (i.e. closing browser tab, leaving to the lobby, connection errors, critical errors or other reasons).

**Request format**

.. code-block:: js

 {
    "name": "",           // string, one of: "login", "transaction", "getbalance", "rollback", "logout"
    "uid": "",            // string, [0-9a-zA-Z]{32}
    "timestamp": "",      // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
    "session": "",        // string, [0-9a-zA-Z]{32}
    "args": {}
 }

============  =====================================================    ===============
Parameter     Value                                                    Description
============  =====================================================    ===============
name          string, [a-z]+                                           Method name, can be one of the following: "login", "transaction", "getbalance", "rollback", "logout".
uid           string, [0-9a-zA-Z]+, 32 characters                      Unique request identifier. API methods should be idempotent, i.e. repeated request with same uid should not be processed twice by the Operator. Responses cache must be stored until the **logout** method for this session is received.
timestamp     string, ISO-8601 datetime"YYYY-MM-DDThh:mm:ssВ±hh:mm"     Request generation time. Timestamp is not updated over repeated requests sending.
session       string, [0-9a-zA-Z]+, 32 characters                      Game session identifier generated by the game server.
args                                                                   Set of arguments that differs for every API method.
============  =====================================================    ===============

.. attention::
    Note, that all of your responses should be passed along with **200** HTTP status code regardless of the response's content.
    If a request wasn't successfully processed by the Operator, a 503 error must be returned. In this case the game server will try to process this request again and send it until it gets 200 HTTP status code.

.. danger::
  If your server receives a transaction with a ``uid`` which it has already processed, you **must** return a cached result instead of re-processing this ``uid`` again.

  Otherwise, you will face a lot of locked transactions, that will block players' gameplay, therefore requiring your manual actions to investigate and resolve such transactions.

.. note::
  Be advised, that the uniqueness of all ``*id`` parameters passed in the Game Provider's requests to your server is only guaranteed in the ``{PROJECT_NAME}`` limits.

**Response format**

.. code-block:: js

 {
    "uid": "",            // string, the same as request uid
    "player": {
        "id": "",         // string, [-_0-9a-zA-Z]+
        "nick": "",       // string, any string
        "currency": "",   // string, ISO-4217 currency code or "FUN"
    },
    "balance": {
        "value": 0,      // biginteger, >= 0
        "version": 0     // should be increased after balance.value is changed; it should not be reset on a start of the new game session
    },
    "error": {
        "code": "",       // string, [*A-Z]+
        "message": ""     // string, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
    }
 }

===========  ======================================  ============
Parameter    Value                                   Description
===========  ======================================  ============
**uid**      string, [0-9a-zA-Z]+, 32 characters     The same uid as was passed in the request.
**player**
id           string, [-_0-9a-zA-Z]+                  Player's id in Operator's data base.
nick         string                                  Player's nickname, can be any string.
currency     string, ISO-4217 code or "FUN"          E.g. USD, EUR, RUB. Full list of all supported currencies must be agreed with an integration manager. For the game in demo mode special currency ("FUN") must be passed.
**balance**
value        biginteger, greater or equals to 0      Player's balance value in cents.
version      biginteger                              Version of player's balance must start from *0 or any positive number* and it should be **increased** every time player's balance is changed. Note, that ``version`` should be kept for each ``player_id + currency`` object and it **should not** be reset on a start of the new game session.
**error**
code         string, [\*A-Z]+, up to 100 characters  There are different error code sets for every API method.
message      string                                  This parameter is used for passing an information about the problem, which occured during the game session. In case you pass non-empty ``message``, then the ``message`` will be displayed to a player inside a pop-up window, otherwise the standard message will be shown to the player. There are separate standard message sets for every game and localization. Ask your integration manager for more details.
===========  ======================================  ============

- ``player`` object must be passed only in response to the **login** request;
- in case of errors, it is not mandatory to pass ``player`` and ``balance`` objects.

.. important::
    Seamless Wallet API implementation on Operator's side must have ability to receive extra JSON fields yet not present in API to avoid critical situations due to API updates.

.. _login-seamless-label:

Login method
=============

On game start, the Operator sends player's authentication token (see Figure 1). Game server creates session ID and passes it along with the token in the **login** request. Then, the Operator receives series of transactions with this session ID until **logout** command for this session is received.

Only one unique game session can be running in given time period for one player with one currency (game + player ID + currency). I.e.

- A player can play several different games simultaneously;
- A player can play one game with different currencies (e.g. FUN and USD);
- A player is not allowed to play a same game with a same currency. If the player starts the same game twice, previous one is closed.

.. warning::
    Receiving of new **login** command for a same player, currency and game does not mean that there will be no commands for previous session. See `Transaction method`_ for details.


.. figure:: images/betapi/login.png
    :align: center

    Figure 1 - Game's start scheme

**Request format:**

.. code-block:: js

 {
     "name": "login",
     "uid": "",            // string, [0-9a-zA-Z]{32}
     "timestamp": "",      // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",        // string, [0-9a-zA-Z]{32}
     "args": {
         "token": "",      // string, generated by Operator
         "game": ""        // string, game's ID
     }
 }


**Response format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "player": {
         "id": "",         // string, [-_0-9a-zA-Z]+
         "nick": "",       // string, any string
         "currency": ""    // string, ISO-4217 currency code or "FUN"
     },
     "balance": {
         "value": 0,       // biginteger, >= 0
         "version": 0      // biginteger, should be increased after balance.value is changed; it should not be reset on a start of the new game session
     },
     "settings": {         // [optional]
         "profile": ""     // [optional] string, profile name, which will be applied for this exact game session (see Tip box below)
     }
 }


**Response containing an error format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "error": {
         "code": "",       // string, one of "GAME_NOT_ALLOWED", "INVALID_TOKEN", "EXPIRED_TOKEN"
         "message": ""     // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
     }
 }

.. tip::
  Profiles offer you customization options for each exact game session, for more information see :ref:`profiles-label`.

If the **login** was declined, the Operator can pass one of the following error codes:

================  ===========
Error code        Description
================  ===========
INVALID_TOKEN     Passed token was not generated by the Operator.
EXPIRED_TOKEN     The token is expired.
GAME_NOT_ALLOWED  The player is not allowed to play this game.
================  ===========

.. note::
    It is recommended to use at least 24h expiration intervals for tokens. Less expiration time may cause bad user experience on mobile devices.


.. _transaction-method-label:

Transaction method
===================

Every transaction contains a bet and/or a win, an array of rounds' IDs related to the given transaction, and freebet's ID, if the freebet was used.


.. figure:: images/betapi/transaction.png
    :align: center

    Figure 2 - Performing game action scheme

For every started game all transactions are processed sequentially. If the transaction can not be processed for any reason (no connection with the Operator, protocol errors, etc.), several ``{MAX_COMMAND_RETRY}`` (configured by integration manager) attempts will be made (see figure 3).

If no response was received:

1) a session is being closed;
2) the game is being locked;
3) the transaction is appended to the blocked transactions list (see figure 4).

The **logout** command will not be sent for the session with the blocked transaction until this transaction is unblocked. A player will not be able to play this game until blocked transaction is unblocked, too.

.. warning::
    New **login** request may be sent before the **logout** on previous session of same token, player ID, game and currency. If previous session has uncommitted transaction, it will be sent again with previous session identifier. That's the case when the Operator receives commands with old session ID after new session was created by **login** request. If this transaction cannot be committed, a player will be blocked.

    Considering written above, please, make sure your system doesn't try to validate old *tokens* **OR** at least is able to accept them after their expiration *until* **logout** command for that ``session_id + token`` is received by your server.
    Otherwise, financial mismatches between Game Provider's and Operator's systems may occur. Also, blocked players will be unable to be unblocked automatically at the moment your server receives an 'old' transaction.

.. figure:: images/betapi/transaction_503.png
    :align: center

    Figure 3 - Repeated transaction sending scheme

.. figure:: images/betapi/transaction_lock.png
    :align: center

    Figure 4 - Game blocking scheme

**Request format:**

.. code-block:: js

 {
     "name": "transaction",
     "uid": "",                    // string, [0-9a-zA-Z]{32}
     "timestamp": "",              // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",                // string, [0-9a-zA-Z]{32}
     "args": {
        "bet": null,               // biginteger or null
        "win": null,               // biginteger or null
        "rounds": [],              // array[biginteger]
        "token": "",               // string, generated by Operator
        "game": "",                // string, game's ID
        "round_started": true,     // boolean, indicates, if current game action is a start of game round; see the table below for explanation
        "round_finished": false,   // boolean, indicates, if current game action is a finish of game round; see the table below for explanation
        "player": {
            "id": "",              // string, player's ID in Operator's data base
            "currency": ""         // string, ISO-4217 code or "FUN"
        },
        "freebet_id": 1,            // biginteger or null
        "freebet_details": {        // null or object in case of a freebet transaction
            "id": 1,                // biginteger
            "type": "",             // string, one of: "fixed", "flexible", "feature_freespins"
            "source": "",           // string, one of: "tournament", "jackpot", "daily_reward", "lottery", "operator"
            "source_type": null,    // null or string, will be used in future promo tools
            "place": null,          // biginteger, only in case the freebet is a tournament prize, otherwise - null
            "campaign": "",         // string, promotional campaign name, may be empty
            "total_bet": 0,         // biginteger, >0, total_bet set for flexible/feature_freespins freebet or accumulated bet of all fixed freebet's rounds in cents
            "total_rounds": 0,      // integer, >0, only for fixed freebets, otherwise - null
            "round_bet": 0,         // biginteger, >0, in cents, only for fixed freebets, otherwise - null
            "start_date": null,     // string, ISO-8601 or null
            "end_date": null,       // string, ISO-8601 or null
            "status": "",           // string, one of: "active", "finished"
            "played_bet": 0,        // biginteger, >=0, current accumulated amount of played bets in the freebet
            "played_win": 0         // biginteger, >=0, current accumulated amount of winnings in the freebet
        },
        "award_id": null,            // biginteger or null, ID of an award; player may be awarded for fulfilling some predefined condition in a game
        "award_details": {           // null or object in case of an award transaction
            "id": 1,                 // biginteger, award ID
            "type": "",              // string, one of: "money", "souvenir"
            "source": "",            // string, one of: "tournament", "jackpot", "daily_reward", "lottery"
            "source_type": null,     // null or string, will be used in future promo tools
            "place": null,           // biginteger, only in case the award is a tournament prize, otherwise - null
            "campaign": "",          // string, promotional campaign name, may be empty
            "amount": 0,             // biginteger, >=0
            "start_date": null,      // string, ISO-8601 or null
            "end_date": null,        // string, ISO-8601 or null
            "status": "finished"     // string, always "finished"
        }
     }
 }


- ``bet=null`` value means a player didn't bet in current game action (e.g. this situation may happen during freespins series).

.. warning::
  Your system **must be** able to accept Game Provider's transactions with ``bet=null`` even in case player's token is expired at your side.
  Transactions containing ``bet=null`` are progressive wins and they are sent to the Operator **after** the Operator **accepts player's bet**, which means declining such transaction will deny player of his fair win. Also, such behavior of the Operator's side will require manual actions to be performed, i.e. unblocking player's transaction from Game Provider's backoffice and crediting the player with his win.

.. attention::
  Your system **must be** able to accept Game Provider's award transactions containing ``bet=0``, ``award_id!=null``.


- ``win=null`` value means a round is not finished yet, and a win hasn't been calculated yet.
- If ``bet != null``, the Operator can reject the bet (e.g. insufficient funds on player's account), but when a transaction contains only a win, a casino can not refuse to credit it to player's account.
- Transactions may be processed in ``one round -- one transaction`` mode (e.g. a spin in slot games). In that case each transaction contains a new ``round_id``:
    * ``bet = 10, win = 0,  rounds = [356]`` *(new round)*
    * ``bet = 10, win = 0,  rounds = [357]`` *(new round)*
    * ``bet = 10, win = 15, rounds = [358]`` *(new round)*
- Transactions may be processed in ``one round -- several transactions`` mode (e.g. a spin + respin in slot games).
    * ``bet = 10,   win = 20,   rounds = [359]``    *(a new round)*
    * ``bet = null, win = 10,   rounds = [359]``    *(an additional win in 359 round)*
    * ``bet = 10,   win = null, rounds = [360]``    *(a bet in a new round)*
    * ``bet = null, win = 0,    rounds = [360]``    *(a win in 360 round)*
- Transactions may be processed in ``several rounds - one transaction mode`` (e.g. freebets (free rounds which are given to a player by the Operator).
    * ``bet = 50, win = 45, rounds = [361, 362, 363, 364, 365], freebet_id = 7``    *(the transaction is processed only in case all free rounds were played)*
- Transactions with freebet_id may interrupt a sequence of same-round-transactions:
    * ``bet = 10,   win = null, rounds = [366]``    *(a bet in a new round)*
    * ``bet = 50, win = 45, rounds = [367, 368, 369], freebet_id = 8``    *(the transaction containing a freebet_id)*
    * ``bet = null, win = 10,    rounds = [366]``    *(a win in 366 round)*

.. attention::
    Freebet transactions (``freebet_id != null``) must be paid by Operator. ``bet`` should not be charged from player's account.

.. attention::
    Award transactions (``award_id != null``) containing ``award_details.type=souvenir`` **must not** be paid by Operator. Neither ``bet`` should be charged from the player's account nor ``win`` should be credited to the player's account.

.. container:: toggle

    .. container:: header

      **round_started/round_finished mechanics**

    |

    There are three statements, that are applied to the round_started/round_finished mechanics:

    1. Every time a player clicks **Spin**, our transactions will contain ``round_started: true``;
    2. Transactions that are representing all subsequent game actions between clicking **Spin** will contain ``round_started: false``;
    3. Transaction that represents the last game action of the round will contain ``round_started: false``, ``round_finished: true`` **OR** ``round_started: true``, ``round_finished: true`` in case the round didn't contain any subsequent game actions after player had clicked **Spin**.

    The following tables demonstrate a behavior of the round_started/round_finished mechanics. A sequence of tables' ``round_id`` may be interpreted as one game session.

      .. table:: Regular spin round

         ===========  =============  ==============  ===  ===  ========
         Action name  round_started  round_finished  bet  win  round_id
         ===========  =============  ==============  ===  ===  ========
         spin         true           true            100  100  10
         ===========  =============  ==============  ===  ===  ========

      .. table:: Regular spin round with subsequent freespins series

          =============  =============  ==============  ====  ===  ========
          Action name    round_started  round_finished  bet   win  round_id
          =============  =============  ==============  ====  ===  ========
          spin           true           false           100   100  11
          freespin       false          false           null  50   11
          freespin_stop  false          true            null  0    11
          spin           true           true            100   0    12
          =============  =============  ==============  ====  ===  ========

      .. table:: Regular spin round with respin

          ===========  =============  ==============  ====  ===  ========
          Action name  round_started  round_finished  bet   win  round_id
          ===========  =============  ==============  ====  ===  ========
          spin         true           false           100   50   13
          respin       false          true            null  150  13
          spin         true           true            100   0    14
          ===========  =============  ==============  ====  ===  ========

      .. table:: Regular spin round with subsequent bonus game

          ===========  =============  ==============  ====  ===  ========
          Action name  round_started  round_finished  bet   win  round_id
          ===========  =============  ==============  ====  ===  ========
          spin         true           false           100   0    15
          bonus        false          false           null  400  15
          bonus_stop   false          true            null  0    15
          spin         true           true            100   100  16
          ===========  =============  ==============  ====  ===  ========

      .. table:: Freebets series interrupting regular round

          ==============  =============  ==============  ====  ===  ==========  ==========
          Action name     round_started  round_finished  bet   win  round_id    freebet_id
          ==============  =============  ==============  ====  ===  ==========  ==========
          spin            true           false           100   300  17          null
          freespin        false          false           null  400  17          null
          freebet rounds  true           true            200   900  18, 19, 20  5
          freespin        false          false           null  100  17          null
          freespin_stop   false          true            null  0    17          null
          spin            true           true            100   0    21          null
          ==============  =============  ==============  ====  ===  ==========  ==========

|

**Response format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "balance": {
         "value": 0,      // biginteger, >= 0
         "version": 0     // should be increased after balance.value is changed; it should not be reset on a start of the new game session
     }
 }


**Response containing error format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "balance": {
         "value": 0,       // biginteger, >= 0
         "version": 0      // should be increased after balance.value is changed; it should not be reset on a start of the new game session
     },
     "error": {
         "code": "",       // string, one of "TIME_EXCEED", "LOSS_EXCEED", "BET_EXCEED", "FUNDS_EXCEED", "OTHER_EXCEED", "FATAL_ERROR"
         "message": ""     // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
     }
 }


.. note::
  Buttons at the error pop-up can be configured. Please refer to :ref:`custom-buttons-label` for details.

.. _exceed-errors-label:

.. table:: Transaction method error codes

  ==============  ============================
  Error code      Description
  ==============  ============================
  TIME_EXCEED     Time limit for a given game is exceeded. This error code may be passed only in case ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  LOSS_EXCEED     Loss limit exceeded. This error code may be passed only in case ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  BET_EXCEED      Bet limit exceeded. This error code may be passed only in case ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  FUNDS_EXCEED    Insufficient funds. This error code may be passed only in case ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  OTHER_EXCEED    Another reason. This error code may be passed only in case ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  SESSION_CLOSED  This error code may be used by the Operator in case you need to kick a player from the game for any reason you have (e.g. expired token, maintenance period, etc). Receiving this error code will cause session close from Game Provider's side. Game Provider's game server won't accept player's bet and in a while **logout** request will be sent to the Operator with SESSION_CLOSED disconnect reason. This error code may be passed only in case transaction's ``bet != null``.

                  For example, if a player would have ongoing freespins series with ``bet == null`` transaction requests, then you **CAN NOT** pass this error code.
  FATAL_ERROR     Receiving this error code means that critical error occurred. An access to a game for that player will be blocked. No repeated requests will be sent. For such kind of transactions manual unblock is required (see :ref:`locked-transactions-label`)
  ==============  ============================



Rollback method
================

If there is an unfinished transaction while a player starts a game, game server will try to roll back this transaction. To avoid negative balance, **transaction** is sent for win transactions ( ``win != null`` ) instead of **rollback** (see figure 5). The player will not be able to start the game until that transaction is either successfully processed or canceled.

.. figure:: images/betapi/rollback.png
    :align: center

    Figure 5 - Transaction cancellation scheme

.. warning::
    If any transaction with ``transaction_uid`` identifier was processed by the Operator, it must be rolled back. In other case, actual player's balance must be returned.


**Request format:**

.. code-block:: js

 {
     "name": "rollback",
     "uid": "",                    // string, [0-9a-zA-Z]{32}
     "timestamp": "",              // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",                // string, [0-9a-zA-Z]{32}
     "args": {
         "transaction_uid": "",    // string
         "bet": null,              // biginteger or null
         "win": null,              // biginteger or null
         "rounds": [],             // array[biginteger]
         "freebet_id": null,       // biginteger or null
         "token": "",              // string, generated by Operator
         "award_id": null,         // biginteger or null, ID of an award; player may be awarded for fulfilling some predefined condition in a game
         "game": "",               // string, game's ID
         "player": {
            "id": "",              // string, player's ID in Operator's data base
            "currency": ""         // string, ISO-4217 code or "FUN"
         }
     }
 }


**Response format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "balance": {
         "value": 0,       // biginteger, >= 0
         "version": 0      // should be increased after balance.value is changed; it should not be reset on a start of the new game session
     }
 }


**Response containing an error format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "error": {
         "code": "",       // string, one of: "FATAL_ERROR"
         "message": ""     // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
     }
 }

============  ===========
Error code    Description
============  ===========
FATAL_ERROR   Receiving this error code means that critical error occurred. An access to a game for that player will be blocked. No repeated requests will be sent. For such kind of rollbacks manual unblock is required (see :ref:`locked-transactions-label`).
============  ===========



Getbalance method
==================

**getbalance** method will be sent for users with opened game client and who's balance wasn't updated in specific amount of time ( ``{BALANCE_EXPIRE}`` seconds ), which is configured by integration manager.


**Request format:**

.. code-block:: js

 {
     "name": "getbalance",
     "uid": "",                  // string, [0-9a-zA-Z]{32}
     "timestamp": "",            // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",              // string, [0-9a-zA-Z]{32}
     "args": {
        "token": "",             // string, generated by Operator
        "game": "",              // string, game's ID
        "player": {
            "id": "",            // string, player's ID in Operator's data base
            "currency": ""       // string, ISO-4217 code or "FUN"
        }
     }
 }


**Response format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "balance": {
         "value": 0,       // biginteger, >= 0
         "version": 0      // should be increased after balance.value is changed; it should not be reset on a start of the new game session
     }
 }


**Response containing an error format:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "error": {
         "code": "",       // string, one of: "FATAL_ERROR"
         "message": ""     // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
     }
 }

============  ===========
Error code    Description
============  ===========
FATAL_ERROR   Receiving this error code means that critical error occured.
============  ===========


.. _logout-method-label:

Logout method
===============

**logout** is a last request sent for every game session. When it's sent, it means that a player is disconnected, and all transactions and/or rollbacks have been successfully completed.

**Request format:**

.. code-block:: js

 {
     "name": "logout",
     "uid": "",                  // string, [0-9a-zA-Z]{32}
     "timestamp": "",            // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",              // string, [0-9a-zA-Z]{32}
     "args": {
         "reason": "",           // string, one of logout reasons
         "token": "",            // string, generated by Operator
         "game": "",             // string, game's ID
         "player": {
            "id": "",            // string, player's ID in Operator's data base
            "currency": ""       // string, ISO-4217 code or "FUN"
         }
     }
 }

======================  ===========
Reason                  Description
======================  ===========
PLAYER_DISCONNECTED     A player disconnected.
GAME_REOPENED           A game with a same currency is opened in a new window\tab.
CURRENCY_NOT_SUPPORTED  This currency is not supported.
GAME_SETTINGS_CHANGED   Game settings have changed, reload is required.
SERVER_ERROR            Internal server error.
PROTOCOL_ERROR          Wallet Seamless API protocol error -- the Operator sends an invalid response.
PLAYER_LOCKOUT          A player is blocked.
SESSION_CLOSED          A player was disconnected after receiving SESSION_CLOSED error code from the Operator.
INVALID_SETTINGS        The Operator passed wrong profile name in response to **login** request.
======================  ===========


**Response format:**

.. code-block:: js

 {
     "uid": ""            // string, the same as request uid
 }


**Response format with error:**

.. code-block:: js

 {
     "uid": "",            // string, the same as request uid
     "error": {
         "code": "",       // string, one of: "FATAL_ERROR"
         "message": ""     // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
     }
 }

============  ===========
Error code    Description
============  ===========
FATAL_ERROR   When the Operator sends this error code, game server will mark this session as 'LOGOUT_FAILED'. Repeated requests will not be sent.
============  ===========



Game process example
#######################

**A partner provided the following information before start of integration process:**

- ``Access URL for Seamless Wallet API`` = "https://api.casino.com/easter_egg_for_attentive_reader/"

**Integration manager provided the following information:**

- ``{GAME_SERVER_URL}`` = "//demoserver.com"
- ``{PROJECT_NAME}`` = "projectname"
- ``{API_TOKEN}``   = "dvdkfi4343f4fldsavmr93"
- ``{WL}``          = "wl1"

This document describes how message exchange between game server and the Operator will look like after completing integration process.

1. Generating game's URL
=========================

- A player opens casino's page and logs in.
- The Operator has an information about this player, his currency and balance.
- The player goes for Wukong game's page.
- The Operator generates game's starting URL: ``//demoserver.com/projectname/static/game.html?wl=wl1&token=testtoken&game=wukong&lang=en&sound=1``. Game's URL contains parameters values provided by integration manager; the Operator generates a token, which is "testtoken" for this example.
- The Operator integrates the game via one of available methods (iframe, redirect, custom domain).
- The game starts.

2. Game server sends a login request
======================================

A following POST request is sent to ``https://api.casino.com/easter_egg_for_attentive_reader/`` URL:

.. code-block:: js

 {
     "name": "login",
     "uid": "4db89a96e0c911e58ac80242ac110009",
     "timestamp": "2016-03-02T22:51:30+00:00",
     "session": "4db895f0e0c911e58ac80242ac110009",
     "args": {
         "token": "testtoken",
         "game": "wukong"
     }
 }

Game server passes "token" value which was used for game's start.

3. The Operator sends response to the login request
=====================================================

.. code-block:: js

 {
     "uid": "4db89a96e0c911e58ac80242ac110009",
     "player": {
         "id": "5",
         "nick": "John",
         "currency": "USD"
     },
     "balance": {
         "value": 1755,
         "version": 12
     }
 }

As you can see, Operator's response contains the same uid which was passed in the request. The Operator figures out what exact player is going to play Wukong game by token. This player has 1755 cents on his account (17 dollars and 55 cents).

- After successful logging in, the game is completely started.
- The player chooses his bet (e.g. 10 cents on each of 20 lines, i.e. 200 cents in total).
- The player presses spin button.
- Game server computes game result.
- Let's assume this was a lost round, so this player has won nothing.

4. Game server sends transaction request
=========================================

POST request is sent to ``https://api.casino.com/easter_egg_for_attentive_reader/`` URL:


.. code-block:: js

 {
     "name": "transaction",
     "uid": "9542f972e16b11e5b52c0242ac110009",
     "timestamp": "2016-03-02T22:51:45+00:00",
     "session": "4db895f0e0c911e58ac80242ac110009",
     "args": {
         "rounds": [3925],
         "freebet_id": null,
         "win": 0,
         "bet": 200,
         "token": "testtoken",
         "game": "wukong",
         "round_started": true     // boolean, indicates, if current game action is a start of game round
         "round_finished": false   // boolean, indicates, if current game action is a finish of game round
         "award_id": null,
         "player": {
             "id": "5",
             "nick": "John",
             "currency": "USD"
         }
     }
 }


As you can see, game server passes ``session`` value which was used in login process. ``rounds=[3925]`` value means both bet and win belong to round 3925. ``freebet_id=null`` value means it is a regular transaction, and a freebet (free rounds which are given to a player by Operator) was not used.

5. The Operator sends a response to transaction request
========================================================

.. code-block:: js

 {
     "uid": "9542f972e16b11e5b52c0242ac110009",
     "balance": {
         "value": 1555,
         "version": 13
     }
 }

As you can see, the Operator sends the response with the same uid, which was passed in the request. The Operator figures out what exact player performs the transaction. The Operator charges 200 cents from player's account and increases balance version.

- The player became upset cause of his bad luck and decides to try another game :)
- The player returns to the lobby.

6. Game server sends logout request
====================================

POST request is sent to ``https://api.casino.com/easter_egg_for_attentive_reader/`` URL:

.. code-block:: js

 {
     "name": "logout",
     "uid": "2b5f1c6ee16d11e5b52c0242ac110009",
     "timestamp": "2016-03-02T22:52:23+00:00",
     "session": "4db895f0e0c911e58ac80242ac110009",
     "args": {
         "reason": "PLAYER_DISCONNECTED",
         "token": "testtoken",
         "game": "wukong",
         "player": {
             "id": "5",
             "nick": "John",
             "currency": "USD"
         }
     }
 }

As you can see, game server passes session value which was used during login process.

7. The Operator sends a response to logout request
======================================================

.. code-block:: js

 {
     "uid": "2b5f1c6ee16d11e5b52c0242ac110009"
 }

As you can see, Operator's response contains the same uid that was passed in the request. The Operator figures out what exact player has exited the game.



Ext. 1: Stream mode
###################

There is a possibility to stream a game of exact player for a spectator in Game Provider's games. Two options are available: online streaming of the game and streaming of exact game rounds.

Only two of described above methods are used for this mode: **login** and **logout**. All changes in these methods are described below.

**login method**

*Response format:*

.. code-block:: js

 {
     "uid": "",                 // string, the same as request uid
     "streamer": {
         "id": "",              // string, [-_0-9a-zA-Z]+ , player's ID, whose game will be streamed
         "nick": "",            // string, any string
         "currency": ""         // string, ISO-4217 currency code or "FUN"
     },
     "stream": {
           "round_from": null,  // biginteger or null, round ID which from a stream will be started
           "round_to": null,    // biginteger or null, round ID where a stream will be ended since "round_from"
           "rounds": null       // biginteger or null, amount of rounds to be streamed beginning from "round_from"
   }
 }

==========  ===========
Parameter   Description
==========  ===========
round_from  Round's ID which from a stream will be started. For online streaming 'null' value must be passed.
round_to    Round's ID where stream will be ended beginning from **round_from**. For online streaming 'null' value must be passed.
rounds      Amount of rounds to be streamed beginning from **round_from**. For online streaming 'null' value must be passed.
==========  ===========

**Examples:**

*Example 1:*

For online streaming of a game of a player with ID 1 and USD currency the following must be passed:


.. code-block:: js

 {
     "uid": "ljkgdsljgal32124",
     "streamer": {
         "id": "1",
         "nick": "",
         "currency": "USD"
     },
     "stream": {
           "round_from": null,
           "round_to": null,
           "rounds": null
   }
 }

In this case, a spectator will watch all played rounds by streamer except freebets. While the streamer plays in freebet mode, the spectator will be in a standby mode.

*Example 2:*

Let's say there is a player with ID 1, who plays in USD currency and he finished game rounds with ID 10, 20, 30, 40, 50, 60.

To stream all these rounds the following must be passed:

.. code-block:: js

 {
     "uid": "ljkgdsljgal32124",
     "streamer": {
         "id": "1",
         "nick": "",
         "currency": "USD"
     },
     "stream": {
           "round_from": 10,
           "round_to": 60,
           "rounds": null
   }
 }

In this case, a spectator will watch every of these six rounds.

*Example 3:*

To stream three rounds, starting at a round with ID 30, the following must be passed:

.. code-block:: js

 {
     "uid": "ljkgdsljgal32124",
     "streamer": {
         "id": "1",
         "nick": "",
         "currency": "USD"
     },
     "stream": {
           "round_from": 30,
           "round_to": null,
           "rounds": 3
   }
 }

In this case, a spectator will watch game rounds with ID 30, 40, 50.

**logout method**

On the end of stream session game server will send **logout** command. Response format is the same as in usual **logout** command.

*Request format:*

.. code-block:: js

 {
     "name": "logout",
     "uid": "",                  // string, [0-9a-zA-Z]{32}
     "timestamp": "",            // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
     "session": "",              // string, [0-9a-zA-Z]{32}
     "args": {
         "reason": "",           // string, "STREAM_FINISHED"
         "token": "",            // string, generated by Operator
         "game": "",             // string, game's ID
         "streamer": {
            "id": "",            // string, player's ID in Operator's data base
            "currency": ""       // string, ISO-4217 code or "FUN"
         }
     }
 }

===============  ===========
Reason           Description
===============  ===========
STREAM_FINISHED  A stream was finished.
===============  ===========

.. _detailed-freebets-label:

Ext. 2: Detailed Freebets
###########################

On Operator's request integration manager can turn on detailed freebets mode for Operator's project. In this mode freebet transactions will be passed to the Operator one by one. Each game round will have its own transaction or several of them in case of progressive win (e.g. freespins).
Each of such transactions will contain ``freebet_id != null``.

**Example**

Let's assume a player has assigned freebet with ``freebet_id=1`` (``game_name=wukong, rounds=2, round_bet=100``, see :ref:`freebet-creating-label-v4` for details).

By default, Operator will receive only one transaction with accumulated bets and wins, related to this freebet:

.. code-block:: js

    {
      "name": "transaction",
      "uid": "3fc06b9acf0e4a7c8d66fb51870e77c1",
      "timestamp": "2018-01-03T11:26:30+00:00",
      "session": "fdcbb84323f74fd88df07760babaa091",
      "args": {
        "freebet_id": 1,                            // freebet transaction
        "bet": 200,                                 // accumulated bet for 2 rounds
        "win": 300,                                 // accumulated win for 2 rounds
        "rounds": [100, 101],                       // IDs of accumulated rounds
        "round_started": true,
        "round_finished": true,
        "game": "wukong",
        "token": "jfdgxgjfgj346",
        "award_id": null,
        "player": {
          "id": "16",
          "currency": "USD"
        }
      }
    }

Using Detailed Freebets extension, Operator will receive a series of transactions, related to this freebet:

.. code-block:: js

    {
      "name": "transaction",
      "uid": "3fc06b9acf0e4a7c8d66fb51870e77c1",
      "timestamp": "2018-01-03T11:26:30+00:00",
      "session": "fdcbb84323f74fd88df07760babaa091",
      "args": {
        "freebet_id": 1,                            // freebet transaction
        "bet": 100,                                 // round_bet in first round
        "win": 0,                                   // win in first round
        "rounds": [100],                            // first round id
        "round_started": true,
        "round_finished": true,
        "game": "wukong",
        "token": "jfdgxgjfgj346",
        "award_id": null,
        "player": {
          "id": "16",
          "currency": "USD"
        }
      }
    }

    {
      "name": "transaction",
      "uid": "3fc06b9acf0e4a7c8d66fb51870e77c2",
      "timestamp": "2018-01-03T11:26:35+00:00",
      "session": "fdcbb84323f74fd88df07760babaa091",
      "args": {
        "freebet_id": 1,                            // freebet transaction
        "bet": 100,                                 // round_bet in second round
        "win": 200,                                 // win in second round
        "rounds": [101],                            // second round id
        "round_started": true,
        "round_finished": false,
        "game": "wukong",
        "token": "jfdgxgjfgj346",
        "award_id": null,
        "player": {
          "id": "16",
          "currency": "USD"
        }
      }
    }

    {
      "name": "transaction",
      "uid": "3fc06b9acf0e4a7c8d66fb51870e77c3",
      "timestamp": "2018-01-03T11:26:40+00:00",
      "session": "fdcbb84323f74fd88df07760babaa091",
      "args": {
        "freebet_id": 1,                            // freebet transaction
        "bet": null,
        "win": 100,                                 // progressive win in second round
        "rounds": [101],                            // second round id
        "round_started": false,
        "round_finished": true,
        "game": "wukong",
        "token": "jfdgxgjfgj346",
        "award_id": null,
        "player": {
          "id": "16",
          "currency": "USD"
        }
      }
    }

.. _betapi-detailed-api-label:

Ext. 3: Detailed API
####################

To get round's details from game server, the Operator should send a response to **login** request like this:

.. code-block:: js

    {
        "uid": "",            // string, the same as request uid
        "player": {
            "id": "",         // string, [-_0-9a-zA-Z]+
            "nick": "",       // string, any string
            "currency": ""    // string, ISO-4217 currency code or "FUN"
        },
        "balance": {
            "value": 0,       // biginteger, >= 0
            "version": 0      // should be increased after balance.value is changed; it should not be reset on a start of the new game session
        },
        "send_details": true  // boolean, indicates if a detailed information about game rounds should be sent to the Operator
    }

.. note::
    The Operator should specify ``send_details`` field only in case he wants to receive a detailed information about game rounds. This field is set to ``false`` by default.

If the Operator has sent a response to game server as in example above, then he will receive a detailed information about game rounds in each transaction. This information will be represented in ``details`` field:

.. code-block:: js

    {
        "name": "transaction",
        "uid": "",                    // string, [0-9a-zA-Z]{32}
        "timestamp": "",              // string, ISO-8601 datetime ("YYYY-MM-DDThh:mm:ssВ±hh:mm")
        "session": "",                // string, [0-9a-zA-Z]{32}
        "args": {
            "bet": null,              // biginteger or null
            "win": null,              // biginteger or null
            "rounds": [],             // array[biginteger]
            "freebet_id": null,       // biginteger or null
            "token": "",              // string, generated by Operator
            "game": "",               // string, game's ID
            "round_started": true     // boolean, indicates, if current game action is a start of game round
            "round_finished": false   // boolean, indicates, if current game action is a finish of game round
            "award_id": null,         // biginteger or null, ID of an award; player may be awarded for fulfilling some predefined condition in a game
            "player": {
               "id": "",              // string, player's ID in Operator's data base
               "currency": ""         // string, ISO-4217 code or "FUN"
            },
            "details": [{
                "round_id": 1         // biginteger
                "data": {}
            }]
        }
    }

.. attention::
    If you want to receive detailed information for freebet transactions (freebet_id != null), you have to implement :ref:`detailed-freebets-label`. Otherwise, ``details`` field wonвЂ™t be sent for freebet transactions.

.. note::
    ``data`` field will contain data set specific for every Game Provider's game.

.. important::
    Retrieving round's details is also possible by using :ref:`Back-office API <playergame-history-v4-label>`.

.. _profiles-label:

Ext. 4: Profiles
####################

You can treat profile as a template, that contains the following **configurable** parameters:

1. **Multipliers**. It's an array of multipliers, that stands for a sequence of ``bet_per_line``'s represented in cents. This parameter affects bets sequence present in the game client (see :term:`bet_factor`).
2. **Default multiplier**. It's an exact multiplier from the array described in *point 1* which is used to set a *default bet* for player's initial game launch.
3. **Money style**. This parameter manages player's balance representation in the game client. There are two available representation modes, *money* and *number*. See pictures below.


=========  ========================================================
Mode       Appearance
=========  ========================================================
Money      .. figure:: images/betapi/money_style_money_like.png
Number     .. figure:: images/betapi/money_style_number_like.png
=========  ========================================================

4. **Currency style**. This parameter manages currency appearance in the game client. There are three available settings, *code*, *symbol* and *hidden*. See pictures below.


=========  ========================================================
Mode       Appearance
=========  ========================================================
Code       .. figure:: images/betapi/currency_style_code.png
Symbol     .. figure:: images/betapi/currency_style_symbol.png
Hidden     .. figure:: images/betapi/currency_style_hidden.png
=========  ========================================================

5. **Currencies**. List of currencies which all of above parameters will be applied to.
6. **Games**. List of game which all of above parameters will be applied to.

To create a profile and configure any of above parameters ask your integration manager.

Ext. 5: Security header
#########################

Not feeling secure enough? We got your back.

Upon your request, HMAC Authentication can be enabled for the API. This solution
implies usage of ``Security-Hash`` header for all HTTP requests and responses concerning this API.
Header's value is directly affected by ``WALLET_SIGN_KEY`` and HTTP request's/response's body.

So, you signed up for this pretty security header. What's next?

1. Game Provider's integration manager should provide you with ``WALLET_SIGN_KEY``. You know, ask those people from the integration chat.
2. All Game Provider's HTTP API requests will contain the ``Security-Hash`` header.
3. All of your HTTP API responses are expected to contain the ``Security-Hash`` header as well. Fair is fair.
4. If the ``Security-Hash`` coming along with your API response would contain an invalid value, you can expect the following behaviour from Game Provider's game server:

  + if the header's invalid value was received for ``login`` command, then this request will be treated as unsuccessful and a player will not be able to log into a game. The player will be also shown *Internal error* pop-up;
  + if the header's invalid value was received for ``transaction`` or ``rollback`` commands, then such request will be blocked upon reaching ``MAX_COMMAND_RETRY`` tries;
  + if the header's invalid value was received for ``getbalance`` or ``logout`` commands, then such request will be treated as unsuccessful, but this will not block a game for a player.

5. Please note that Game Provider's game server will be checking header's validity **only** in case your HTTP response comes along with **200** HTTP code.

Do you have a code example for generating HMAC code? We do.

.. container:: toggle

  .. container:: header

    **Example of HMAC code generation in Python for login command**

  .. code-block:: python
    :linenos:

    import requests
    import hmac
    import hashlib
    import json

    # Wallet sign key provided by Game Provider's integration manager:
    wallet_sign_key = 'example_wallet_sign_key'

    # Your API callback URL:
    wallet_url = 'https://operator-api.com/wallet/easter_egg'

    # Game Provider's game server prepares a request to your server:
    request_body = json.dumps({
      "name": "login",
      "uid": "4db89a96e0c911e58ac80242ac110009",
      "timestamp": "2020-03-02T22:51:30+00:00",
      "session": "4db895f0e0c911e58ac80242ac110009",
      "args": {
          "token": "testtoken",
          "game": "wukong"
      }
    })

    # For the given request_body request_hash value would be
    # '6c8ba2b72208e6bbba80035b320a0bf45a96715a8b199a374f0bcd78955f3832'
    request_hash = hmac.new(
      key=wallet_sign_key.encode('utf8'),
      msg=request_body.encode('utf8'),
      digestmod=hashlib.sha256).hexdigest()

    # As you can see, request sent to your server contains 'Security-Hash' header.
    # Upon receiving the request, you may check if `Security-Hash` header is valid.
    response = requests.post(wallet_url, data=request_body, headers={
      "Content-Type": "application/json",
      "Security-Hash": request_hash
    })

    # Let's assume that your server returned 200 OK response
    response_body = response.get_data(as_text=True)
    response_hash = response.headers.get('Security-Hash')

    # Now Game Provider's game server checks if response_hash is valid for received response_body
    required_hash = hmac.new(
      key=wallet_sign_key.encode('utf8'),
      msg=response_body,
      digestmod=hashlib.sha256).hexdigest()

    if response_hash != required_hash:
      raise Exception('Security-Hash is invalid')

|


.. _custom-buttons-label:

Ext. 6: Custom Buttons
#########################

In case you want to have more control over the player actions during some in-game errors,
it is possible to change default buttons and an error message that are shown in our games' UI. It can be
achieved by adding a few extra parameters to ``error`` object of :ref:`transaction-method-label` response.

There are 4 types of buttons available:

1. **Continue Session** button (``continue_session``): just closes an error pop-up and does nothing more.
2. **Close Session** button (``close_session``): not only closes an error pop-up, but also finishes player's game session.
3. **Show History** button (``show_history``): opens a History page that was sent as ``history_url`` parameter in :ref:`gamerunner-label` arguments.
4. **Close Session and Exit** button (``close_session_and_exit``): closes an error pop-up, finishes player's game session and opens an Exit page that was sent as ``exit_url`` parameter in :ref:`gamerunner-label` arguments.

**Response containing an error with custom buttons:**

.. code-block:: js

 {
     "uid": "",                            // string, the same as request uid
     "balance": {
         "value": 0,                       // biginteger, >= 0
         "version": 0                      // should be increased after balance.value is changed; it should not be reset on a start of the new game session
     },
     "error": {
         "code": "",                       // string, one of "TIME_EXCEED", "LOSS_EXCEED", "BET_EXCEED", "FUNDS_EXCEED", "OTHER_EXCEED", "FATAL_ERROR"
         "message": "",                    // message, any string, if not empty, message content will be displayed to a player inside of a pop-up window, otherwise standard message will be shown
         "buttons": [{
            "text": "button text",         // [MANDATORY] string, text that will be shown on the button, must be brief
            "action": "continue_session"   // [MANDATORY] string, one of "continue_session", "close_session", "show_history", "close_session_and_exit"
         }]
     }
 }


.. attention::
    Maximum 3 buttons can be sent within one transaction response.

There are a few rules you should consider while using custom buttons:

1. If no ``message`` has been sent in the transaction's response, then our default message will be shown in accordance to error code.
2. If **Continue Session** button has been sent together with either FATAL_ERROR or SESSION_CLOSED error codes, then the session still will be closed.
3. **Show History** button will do nothing if the Operator has turned off History's availability for this game session by sending empty ``history_url`` parameter in :ref:`gamerunner-label` arguments.
4. **Close Session and Exit** button will work the same way as **Close Session** button, if the Operator hasn't specified ``exit_url`` parameter in :ref:`gamerunner-label` arguments.
